Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.


Example 1:

Input: 
N = 5
arr[]= {0 2 1 2 0}
Output:
0 0 1 2 2
Explanation:
0s 1s and 2s are segregated 
into ascending order.
Example 2:

Input: 
N = 3
arr[] = {0 1 0}
Output:
0 0 1
Explanation:
0s 1s and 2s are segregated 
into ascending order.

Your Task:
You don't need to read input or print anything. Your task is to complete the function sort012() that takes an array arr and N as input parameters and sorts the array in-place.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 <= N <= 10^6
0 <= A[i] <= 2

//User function Template for Java

// Helper class Geeks to implement 

class Geeks{
    
    // Function to insert element into the queue
    static void insert(Queue<Integer> q, int k){
        q.add(k);
    }
    
    // Function to find frequency of an element
    // return the frequency of k
    static int findFrequency(Queue<Integer> q, int k){
        int frequency = 0;
        
        Iterator<Integer> iterator = q.iterator();
        while (iterator.hasNext()){
            int num = iterator.next();
            if (num == k){
                frequency++;
            }
        }
        
        if (frequency > 0){
            return frequency;
        } else {
            return -1;
        }
    }
}
